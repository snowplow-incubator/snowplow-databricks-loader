{
  # -- Accept the terms of the Snowplow Limited Use License Agreement
  # -- See https://docs.snowplow.io/limited-use-license-1.1/
  "license": {
    "accept": true
  }

  "input": {
    # -- kinesis stream for the source of enriched events
    "streamName": "snowplow-enriched-events"

    # -- name to use for the KCL dynamodb table
    "appName": "snowplow-databricks-loader"

    # -- From where the app should start consuming if this is the first time it is run.
    # -- On subsequent runs, it will always resume from where it last checkpointed.
    "initialPosition": {
      # -- Options are `TRIM_HORIZON` for the oldest available events, `LATEST` for latest events,
      # -- or `AT_TIMESTAMP` to start consuming from events written at a particular time.
      "type": "TRIM_HORIZON"

      # -- Only required if `initialPosition.type` is AT_TIMESTAMP
      "timestamp": "2020-07-17T10:00:00Z" # Required for AT_TIMESTAMP
    }

    # -- How the underlying Kinesis client should fetch events from the stream
    "retrievalMode": {
      # -- Options are "Polling" for the client to poll Kinesis for more events when needed
      # -- or "FanOut" to enabled Kinesis's Enhanced Fan Out feature using HTTP/2
      "type": "Polling"

      # -- Only used if retrieval mode is type Polling. How many events the client may fetch in a single poll.
      "maxRecords": 1000
    }

    # -- Name of this KCL worker used in the dynamodb lease table
    "workerIdentifier": ${HOSTNAME}

    # -- Duration of shard leases. KCL workers must periodically refresh leases in the dynamodb table before this duration expires.
    "leaseDuration": "10 seconds"

    # -- Controls how to pick the max number of leases to steal at one time.
    # -- E.g. If there are 4 available processors, and maxLeasesToStealAtOneTimeFactor = 2.0, then allow the KCL to steal up to 8 leases.
    # -- Allows bigger instances to more quickly acquire the shard-leases they need to combat latency
    "maxLeasesToStealAtOneTimeFactor": 2.0

    # -- Configures how to backoff and retry in case of DynamoDB provisioned throughput limits
    "checkpointThrottledBackoffPolicy": {
      "minBackoff": "100 millis"
      "maxBackoff": "1 second"
    }
  }

  "output": {

    "good": {
      # -- Base URL of the Databricks instance
      "host": "https://<identifier>.cloud.databricks.com"

      # -- Required if using machine-to-machine oauth authentication
      "oauth": {
        "clientId": ${DATABRICKS_CLIENT_ID}
        "clientSecret": ${DATABRICKS_CLIENT_SECRET}
      }

      # -- Personal access token (PAT) to authenticate. An alternative to oauth.
      "token": ${DATABRICKS_TOKEN}

      # -- Databricks Unity Catalog name
      "catalog": "snowplow"

      # -- Databricks schema
      "schema": "atomic"

      # -- Databricks Unity Catalog Volume name
      "volume": "snowplow"

      # -- Compression algorithm for the uploaded parquet file
      "compression": "snappy"
    }

    "bad": {
      # -- output kinesis stream for emitting failed events that could not be processed
      "streamName": "bad"

      # -- how to retry sending failed events if we exceed the kinesis write throughput limits
      "throttledBackoffPolicy": {
        "minBackoff": "100 milliseconds"
        "maxBackoff": "1 second"
      }

      # -- the maximum allowed to records we are allowed to send to Kinesis in 1 PutRecords request
      "recordLimit": 500

      # -- the maximum allowed to bytes we are allowed to send to Kinesis in 1 PutRecords request
      "byteLimit": 5242880
    }

  }

  "batching": {

    # - Events are uploaded to databricks when the batch reaches this size in bytes
    "maxBytes": 16000000

    # - Events are uploaded to Databricks after exceeding this duration, even if the `maxBytes` size has not been reached
    "maxDelay": "1 second"

    # - Controls how many batches can we send simultaneously over the network to Databricks.
    # -- E.g. If there are 4 available processors, and uploadParallelismFactor = 3.5, then we send up to 14 batches in parallel
    # -- Adjusting this value can cause the app to use more or less of the available CPU.
    "uploadParallelismFactor":  3
  }

  # -- Controls how the app splits the workload into concurrent batches which can be run in parallel.
  # -- E.g. If there are 4 available processors, and cpuParallelismFactor = 0.75, then we process 3 batches concurrently.
  # -- Adjusting this value can cause the app to use more or less of the available CPU.
  "cpuParallelismFactor": 0.75

  # Retry configuration for Databricks operation failures
  "retries": {

    # -- Configures exponential backoff on errors related to how Databricks is set up for this loader.
    # -- Examples include authentication errors and permissions errors.
    # -- This class of errors are reported periodically to the monitoring webhook.
    "setupErrors": {
      "delay": "30 seconds"
    }

    # -- Configures exponential backoff errors that are likely to be transient.
    # -- Examples include server errors and network errors
    "transientErrors": {
      "delay": "1 second"
      "attempts": 5
    }
  }

  # -- Schemas that won't be loaded to Databricks. Optional, default value []
  "skipSchemas": [
    "iglu:com.acme/skipped1/jsonschema/1-0-0",
    "iglu:com.acme/skipped2/jsonschema/1-0-*",
    "iglu:com.acme/skipped3/jsonschema/1-*-*",
    "iglu:com.acme/skipped4/jsonschema/*-*-*"
  ]

  # -- Whether the loader should crash and exit if it fails to resolve an Iglu Schema.
  # -- We recommend `true` because Snowplow enriched events have already passed validation, so a missing schema normally
  # -- indicates an error that needs addressing.
  # -- Change to `false` so events go the failed events stream instead of crashing the loader.
  "exitOnMissingIgluSchema": true

  # -- Configuration of internal http client used for iglu resolver, alerts and telemetry
  "http": {
    "client": {
      "maxConnectionsPerServer": 4
    }
  }

  # -- Configuration of internal http client used for iglu resolver, alerts and telemetry
  "http": {
    "client": {
      "maxConnectionsPerServer": 4
    }
  }

  "monitoring": {
    "metrics": {

      # -- Send runtime metrics to a statsd server
      "statsd": {
        "hostname": "127.0.0.1"
        "port": 8125

        # -- Map of key/value pairs to be send along with the metric
        "tags": {
          "myTag": "xyz"
        }

        # -- How often to report metrics
        "period": "1 minute"

        # -- Prefix used for the metric name when sending to statsd
        "prefix": "snowplow.databricks-loader"
      }
    }

    # -- Report unexpected runtime exceptions to Sentry
    "sentry": {
      "dsn": "https://public@sentry.example.com/1"

      # -- Map of key/value pairs to be included as tags
      "tags": {
        "myTag": "xyz"
      }
    }

    # -- Report alerts and heartbeats to the webhook
    "webhook": {
      # URL of a server listening for the webhook
      "endpoint": "https://webhook.acme.com",
      # Set of arbitrary key-value pairs attached to the payload
      "tags": {
        "pipeline": "production"
      }
      # How often to send the heartbeat event
      "heartbeat": "60.minutes"
    }
  }

  # -- Optional, configure telemetry
  # -- All the fields are optional
  "telemetry": {

    # -- Set to true to disable telemetry
    "disable": false

    # -- Interval for the heartbeat event
    "interval": 15 minutes

    # -- HTTP method used to send the heartbeat event
    "method": POST

    # -- URI of the collector receiving the heartbeat event
    "collectorUri": "https://collector-g.snowplowanalytics.com"

    # -- Port of the collector receiving the heartbeat event
    "collectorPort": 443

    # -- Whether to use https or not
    "secure": true

    # -- Identifier intended to tie events together across modules,
    # -- infrastructure and apps when used consistently
    "userProvidedId": my_pipeline

    # -- ID automatically generated upon running a modules deployment script
    # -- Intended to identify each independent module, and the infrastructure it controls
    "autoGeneratedId": hfy67e5ydhtrd

    # -- Unique identifier for the VM instance
    # -- Unique for each instance of the app running within a module
    "instanceId": 665bhft5u6udjf

    # -- Name of the terraform module that deployed the app
    "moduleName": databricks-loader-vmss

    # -- Version of the terraform module that deployed the app
    "moduleVersion": 1.0.0
  }
}
