/*
 * Copyright (c) 2012-present Snowplow Analytics Ltd.
 * All rights reserved.
 *
 * This software is made available by Snowplow Analytics, Ltd.,
 * under the terms of the Snowplow Limited Use License Agreement, Version 1.1
 * located at https://docs.snowplow.io/limited-use-license-1.1
 * BY INSTALLING, DOWNLOADING, ACCESSING, USING OR DISTRIBUTING ANY PORTION
 * OF THE SOFTWARE, YOU AGREE TO THE TERMS OF SUCH LICENSE AGREEMENT.
 */

package com.snowplowanalytics.snowplow.databricks

import cats.effect.testing.specs2.CatsEffect
import cats.effect.IO
import com.comcast.ip4s.Port
import org.apache.parquet.hadoop.metadata.CompressionCodecName
import org.specs2.Specification

import java.nio.file.Paths
import scala.concurrent.duration.DurationInt

import com.snowplowanalytics.snowplow.runtime.{AcceptedLicense, ConfigParser, HttpClient, Retrying, Telemetry, Webhook}
import com.snowplowanalytics.snowplow.pubsub.{GcpUserAgent => PubsubUserAgent}
import com.snowplowanalytics.snowplow.sinks.pubsub.PubsubSinkConfig
import com.snowplowanalytics.snowplow.sources.pubsub.PubsubSourceConfig

class PubsubConfigSpec extends Specification with CatsEffect {
  import PubsubConfigSpec._

  def is = s2"""
   Config parse should be able to parse
    minimal pubsub config $minimal
  """

  private def minimal = {
    val path = Paths.get(getClass.getResource("/config.pubsub.minimal.hocon").toURI)
    ConfigParser.configFromFile[IO, Config[PubsubSourceConfig, PubsubSinkConfig]](path).value.map { result =>
      result must beRight(expectedMinimalConfig)
    }
  }
}

object PubsubConfigSpec {
  private val expectedMinimalConfig = Config[PubsubSourceConfig, PubsubSinkConfig](
    input = PubsubSourceConfig(
      subscription            = PubsubSourceConfig.Subscription("my-project", "snowplow-enriched"),
      parallelPullFactor      = BigDecimal(0.5),
      durationPerAckExtension = 1.minute,
      minRemainingAckDeadline = BigDecimal(0.1),
      gcpUserAgent            = PubsubUserAgent("Snowplow OSS", "databricks-loader"),
      maxMessagesPerPull      = 1000,
      debounceRequests        = 100.millis
    ),
    output = Config.Output(
      good = Config.Databricks(
        host        = "https://<identifier>.cloud.databricks.com",
        token       = None,
        oauth       = Some(Config.DatabricksOAuth(clientId = "test-client-id", clientSecret = "test-secret")),
        catalog     = "snowplow",
        schema      = "atomic",
        volume      = "snowplow",
        compression = CompressionCodecName.SNAPPY
      ),
      bad = Config.SinkWithMaxSize(
        sink = PubsubSinkConfig(
          topic                = PubsubSinkConfig.Topic("my-project", "snowplow-bad"),
          batchSize            = 1000L,
          requestByteThreshold = 1000000L,
          gcpUserAgent         = PubsubUserAgent("Snowplow OSS", "databricks-loader")
        ),
        maxRecordSize = 10000000
      )
    ),
    batching = Config.Batching(
      maxBytes          = 16000000,
      maxDelay          = 1.second,
      uploadConcurrency = 3
    ),
    retries = Config.Retries(
      setupErrors     = Retrying.Config.ForSetup(delay = 30.seconds),
      transientErrors = Retrying.Config.ForTransient(delay = 1.second, attempts = 5)
    ),
    telemetry = Telemetry.Config(
      disable         = false,
      interval        = 15.minutes,
      collectorUri    = "collector-g.snowplowanalytics.com",
      collectorPort   = 443,
      secure          = true,
      userProvidedId  = None,
      autoGeneratedId = None,
      instanceId      = None,
      moduleName      = None,
      moduleVersion   = None
    ),
    monitoring = Config.Monitoring(
      metrics     = Config.Metrics(None),
      sentry      = None,
      healthProbe = Config.HealthProbe(port = Port.fromInt(8000).get, unhealthyLatency = 5.minutes),
      webhook     = Webhook.Config(endpoint = None, tags = Map.empty, heartbeat = 5.minutes)
    ),
    license                 = AcceptedLicense(),
    skipSchemas             = List.empty,
    exitOnMissingIgluSchema = true,
    http                    = Config.Http(HttpClient.Config(4)),
    dev                     = Config.DevFeatures(setEtlTstamp = false)
  )
}
